java代码性能优化
目标：
减小代码的体积
提高代码运行的效率
1.尽量指定类方法的final修饰符
2.尽量重用对象  比如 StringBuilder/StrngBuffer
3.尽可能使用局部变量
4.及时关闭流
5.尽量减少对变量的重复计算
6.尽量采用懒加载策略，即在需要的时候再创建
7.慎用异常(异常尽量只用于错误处理)
8.把trycatch 放在外层
9.如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度
10.当复制大量数据时，使用System.arraycopy()命令
11.乘法和除法使用位移操作   a =a*8;    a = a << 3   b = val/2   b = val << 1
12.把创建的对象放在循环外部
13.基于效率和类型检查的考虑，应尽可能使用array，无法确定数组大小时才使用arraylist
14.尽量使用hashmap、arraylist、Stringbuilder 除非线程安全需要，不推荐使用hashtable  vector Stringbuffer
15.不要将数组声明为public static final
16.尽量在合适的场合使用单例
17.尽量避免随意使用静态变量
18.及时清楚不需要的会话
19.实现radomaccess接口的集合，比如arraylist，应该使用最普通的for循环而不是foreach循环
20.使用同步代码块替代同步方法
21.将常量声明为static final  并以大写命名
22.不要创建不使用的类，不要导入不使用的类
23，反射影响效率，却是用到的话最好在启动时，将需要通过反射加载的类在项目启动的时候通过反射实例化的对象存入内存
24.使用数据库连接池和线程池
25.使用带缓冲的输入输出流进行IO操作
26.顺序插入和随机访问比较多的场景使用arraylist，元素删除和中间插入比较多的场景使用linkedlist
27.不要让public方法有太多的形参
28.字符串和字符串常量equals的时候将常量写在前面
29.不要对数组使用toString方法
30.不要对超出范围的基本数据类型做向下强制转型
31.公用的集合类中不使用的数据要remove掉
32。把一个基本数据类型转为字符串，基本数据类型.toString()
33.遍历map时  使用 Iterator iter = map.iterator(); while(iter.hasNext()){iter.next()}
34.对资源的close分开操作（防止资源泄漏）